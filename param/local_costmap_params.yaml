# Локальный планировщик (далее «ЛП») работает в паре с ГП (глобальным планировщиком) и имеет как схожие с ним черты, так и те, что его отличают.
# Он так же как и ГП отвечает за построение маршрута, но на его плечи ложатся другие задачи: следовать проложенному ГП маршруту и избегать препятствия по пути (avoids obstacles).
# Как только ГП рассчитал план пути, этот план отравляется в ЛП. ЛП, в свою очередь, выполняет каждый сегмент этого плана. Таким образом, имея маршрут и карту, ЛП отправляет «команды движения» и двигает робота.
# В отличие от ГП, ЛП следит за одометрией, данными с лидара и выбирает свободный от препятствий маршрут.
#Как только локальный план рассчитан, он публикуется в топик /local_plan, кроме того, ЛП публикует часть глобального плана, по которому он следует в топик /global_plan.

local_costmap:
    # Спецификация следа робота
    footprint: [[-0.305, -0.18], [-0.305, 0.18], [0.305, 0.18], [0.305, -0.18]]
    # Дополнительный зазор вокруг следа, который обычно используется для обеспечения некоторого дополнительного расстояния между роботом и препятствиями во время навигации
    footprint_padding: 0.01
    # Задает допустимую задержку в данных преобразования (tf) в секундах
    transform_tolerance: 1.0
    # Частота обновления карты в Гц
    update_frequency: 10.0
    # Частота в Гц для отображения отображаемой информации на карте
    publish_frequency: 10.0

    # Глобальный фрейм карты затрат для работы
    global_frame: odom
    # Название фрейма для базового звена робота
    robot_base_frame: base_link
    # ВНИМАНИЕ: Следующие параметры могут быть перезаписаны некоторыми слоями, а именно слоем статической карты
    # Разрешение карты в метрах/ячейка
    resolution: 0.05
    # Ширина карты в метрах
    width: 2.0
    # Высота карты в метрах
    height: 2.0
    
    static_map: false
    # Следует ли использовать версию карты затрат со скользящим окном. Означает, что вы используете карту затрат не для представления всей вашей среды, а только для представления вашего местного окружения. Если для параметра static_map установлено значение true, этот параметр должен иметь значение false
    rolling_window: true

    # Последовательность спецификаций плагинов, по одной на слой. Каждая спецификация представляет собой словарь с полями имени и типа. Имя используется для определения пространства имен параметров для плагина
    plugins:            
        - {name: sensor,    type: "costmap_2d::ObstacleLayer"}
        - {name: inflation, type: "costmap_2d::InflationLayer"}

    # Отслеживает препятствия, с помощью датчика
    sensor:
        # Список имен источников наблюдения, разделенных пробелами. Это определяет каждое из пространств имен <source_name>, определенных ниже
        observation_sources: laser_scan_sensor
        # sensor_frame - Рамка происхождения датчика
        # data_type - тип данных, связанный с темой
        # topic - тема, по которой данные датчиков входят в этот источник
        # clearing - cледует ли использовать это наблюдение для очистки свободного пространства
        # marking - cледует ли использовать это наблюдение для обозначения препятствий
        laser_scan_sensor: {sensor_frame: laser, data_type: LaserScan, topic: scan, marking: true, clearing: true}

    # Является оптимизацией, которая добавляет новые ценности вокруг летальных препятствий (т.е. раздувает препятствия) для того, чтобы сделать costmap представляет конфигурационное пространство робота
    inflation:
        # Радиус в метрах, до которого карта увеличивает значения стоимости препятствий
        inflation_radius: 2.5
        # Коэффициент масштабирования, применяемый к значениям затрат во время инфляции
        cost_scaling_factor: 8.0
